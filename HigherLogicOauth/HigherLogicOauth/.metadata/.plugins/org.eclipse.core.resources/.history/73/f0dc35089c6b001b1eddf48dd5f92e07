package com.italent.translator.serviceimpl;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;

import org.springframework.stereotype.Service;

//import com.italent.translator.service.TestInterface;
import com.italent.translator.service.TestService;


/**
 * @author mimtiazu
 *
 */
@Service

public class TestServiceImple implements TestService {

	private static final Logger logger = LoggerFactory.getLogger(GoogleTranslateServiceImpl.class);
	
	private static int NoOfGoogleApiCallsPerRequest=0;
	
	private static int totalNoOfCharatersPerRequest=0;
	
	//@Autowired
	//private KeyVaultService keyVaultService;
	
	@Value("${app.googleapikey}")
	private String googleApiKey;
	
	//@Value("${azure.keyvault.key}")
    //private String keyVaultKey;
	
	//@Value("${azure.keyvault.versionid}")
    //private String keyVaultVersionId;
	
	@Value("${app.max_char_length}")
	private int maxCharLength;
	
	@Value("${app.max_threadpool_size}")
	private int maxThreadPoolSize;
	
	private static ConcurrentHashMap<String,String> elementMapData=new ConcurrentHashMap<>();
	LinkedHashSet<String> list = new LinkedHashSet<String>();
	LinkedHashMap<Element, String> lhm  = new LinkedHashMap<Element, String>();
	
	/**
	 * this method is to parse each HTML element and 
	 * send to Google translate API 
	 * 
	 */
	@SuppressWarnings("PMD")
	//@Override
	public String translateContent1(String projectId, String targetLanguage, String text) throws UnsupportedEncodingException, IOException, RuntimeException{
		
		String html=null;
		Document document=null;
		ExecutorService elementExecutor = Executors.newFixedThreadPool(maxThreadPoolSize);
		try {
			//accessToken=this.googleAuthUtil.generateAccessToken();
			
			html = URLDecoder.decode(text, "UTF-8");
			
			document = Jsoup.parse(html,"UTF-8");
			
			Elements eles = document.select("*");
			logger.info("In translate content method");
			for (Element ele1 : eles) {
				if (!ele1.ownText().isEmpty()) {
				
					if( ele1.html().length() > maxCharLength 
			    			|| ele1.tagName().equalsIgnoreCase("code")
			    			|| ele1.tagName().equalsIgnoreCase("script")
			    			|| ele1.className().equalsIgnoreCase("well")
			    			|| ele1.className().equalsIgnoreCase("message-original-button")
			    			||ele1.className().equalsIgnoreCase("translation-section")
			    			//|| ((ele.parents().hasClass("col-md-12 messageContentColumn")) && (ele.ownText().length() > 0))
			    	){
						//ignoring elements
			    		//logger.info(" element own text element length "+ele.html());
			    		//logger.info("element own text "+ele.ownText());
					}else {
					
						list.add(ele1.html());
						lhm.put(ele1, ele1.html());
					} 
				}
			}
			System.out.println ("###sourcearrayinput length"+list.size());
			
			String[] sourceArray = list.toArray(new String[0]);	
			System.out.println ("###sourcearrayinput"+sourceArray.length);
		} catch (UnsupportedEncodingException e) {
			elementExecutor.shutdown();
			logger.error("Invalid url: %s", text);
			throw e;
		} catch (Exception e) {
			elementExecutor.shutdown();
			logger.info("Translation failed "+e);
			throw new RuntimeException(e);
		}finally {
			totalNoOfCharatersPerRequest = 0;
			NoOfGoogleApiCallsPerRequest = 0;
			elementMapData.clear();
			elementExecutor.shutdown();
		}
		return "hai";
	}
		
		
	
}
		
